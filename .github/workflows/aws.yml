name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:     
  ECR_REPOSITORY: 'taskmaster-repo'                                                        

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Run Tests with Maven
      run: mvn test

    - name: Publish Test Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          target/surefire-reports/*.xml
          target/failsafe-reports/*.xml
        retention-days: 30

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |   
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ secrets.ECS_TASK_DEFINITION }}
        container-name: ${{ secrets.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ secrets.ECS_SERVICE }}
        cluster: ${{ secrets.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
  
    - name: Install Newman
      run: npm install -g newman
  
    - name: Generate dynamic taskId
      id: generate-task-id
      run: echo "taskId=$((GITHUB_RUN_NUMBER - 14))" >> $GITHUB_ENV
  
    - name: Running Automated API Tests for Production
      run: |
          newman run postman-collection.json \
            --env-var baseUrl="http://taskmaster-alb-945439181.ap-south-1.elb.amazonaws.com/api" \
            --env-var taskId=$taskId \
            --reporters cli,junit --reporter-junit-export "newman-report.xml"
    
    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      with:
        name: newman-report
        path: newman-report.xml
        retention-days: 30     